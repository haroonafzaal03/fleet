<?php

namespace TND\ElasticSearch;

use SilverStripe\Forms\DropdownField;
use SilverStripe\Forms\TextField;
use SilverStripe\ORM\DataObject;

/**
 * Class ElasticQueuedData
 *
 * @property string Title;
 * @property string Status;
 * @property string Signature;
 * @property string Index;
 * @property string DataObjectClass;
 * @property int DataObjectID;
 * @property string Data;
 *
 * @package TND\ElasticSearch
 */
class ElasticQueuedData extends DataObject
{
    const QUEUE_NEW = 'New';

    const QUEUE_COMPLETE = 'Complete';

    const QUEUE_FAILED = 'Failed';

    private static $db = [
        'Title' => 'Varchar(255)',
        'Status' => 'Enum(array("New", "Complete", "Failed"), "New")',
        'Signature' => 'Varchar(255)',
        'Index' => 'Varchar(100)',
        'DataObjectClass' => 'Varchar(100)',
        'DataObjectID' => 'Int',
        'Data' => 'Text',
    ];

    private static $defaults = [

    ];

    private static $has_many = [

    ];

    private static $many_many = [

    ];

    private static $many_many_extraFields = [
    ];

    private static $owns = [
    ];

    private static $singular_name = 'Elastic Queued Data';

    /**
     * @var string
     */
    private static $plural_name = 'Elastic Queued Data';

    /**
     * Table name
     *
     * @var string
     */
    private static $table_name = 'ElasticQueuedData';

    /**
     * Indexes
     *
     * @var array
     */
    private static $indexes = [
        'Status' => true,
        'Signature' => true,
        'DataObjectClass' => true
    ];

    /**
     * Searchable fields
     *
     * @var array
     */
    private static $searchable_fields = [
        'Title',
        'Status',
        'Signature',
        'Index',
        'DataObjectClass',
        'DataObjectID',
    ];

    /**
     * Casted fields
     *
     * @var array
     */
    private static $casting = [
    ];

    private static $summary_fields = [
        'ID' => 'ID',
        'Title'      => 'Title',
        'DataObjectClass' => 'DataObjectClass',
        'DataObjectID' => 'DataObjectID',
        'Status' => 'Status',
//        'Data' => 'Data',
    ];

    /**
     * @param DataObject $record
     * @return ElasticQueuedData
     */
    public function enqueue($record, $indexClass)
    {
        // validate if not already exist
        $hash = [
            'ID' => $record->ID,
            'ClassName' => $record->getClassName(),
            'IndexClass' => $indexClass,
        ];

        $signature = $this->getHashSignature($hash);
        $queueMessage = static::get()->filter(
            [
                'Signature' => $signature,
                'Status' => static::QUEUE_NEW
            ]
        )->first();

        if ($queueMessage) {
            return $queueMessage;
        }

        // create a new queue message
        $queueMessage = static::create(
            [
                'Title' => 'Reindex '.$indexClass.' ID = '.$record->ID,
                'Signature' => $signature,
                'Index' => $indexClass,
                'DataObjectClass' => $record->getClassName(),
                'DataObjectID' => $record->ID,
                'Data' => '', // TODO: update it to have additional data
            ]
        );

        $queueMessage->write();
        return $queueMessage;
    }

    protected function getHashSignature($hash)
    {
        return md5(serialize($hash));
    }

    public function getCMSFields()
    {
        $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
        $fields->addFieldsToTab('Root.Main',[
            TextField::create('Title', 'Title')->setReadonly(true),
            TextField::create('Signature', 'Signature')->setReadonly(true),
            DropdownField::create('Status', 'Status')->setReadonly(true),
            TextField::create('Index', 'Index')->setReadonly(true),
            TextField::create('DataObjectClass', 'DataObjectClass')->setReadonly(true),
            TextField::create('DataObjectID', 'DataObjectID')->setReadonly(true),
            TextField::create('Data', 'Data')->setReadonly(true),
        ]);

        return $fields;
    }

}
